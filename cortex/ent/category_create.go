// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cortex/ent/category"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CategoryCreate is the builder for creating a Category entity.
type CategoryCreate struct {
	config
	mutation *CategoryMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *CategoryCreate) SetCreatedAt(v time.Time) *CategoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *CategoryCreate) SetNillableCreatedAt(v *time.Time) *CategoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *CategoryCreate) SetUpdatedAt(v time.Time) *CategoryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *CategoryCreate) SetNillableUpdatedAt(v *time.Time) *CategoryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetUUID sets the "uuid" field.
func (_c *CategoryCreate) SetUUID(v uuid.UUID) *CategoryCreate {
	_c.mutation.SetUUID(v)
	return _c
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (_c *CategoryCreate) SetNillableUUID(v *uuid.UUID) *CategoryCreate {
	if v != nil {
		_c.SetUUID(*v)
	}
	return _c
}

// SetSlug sets the "slug" field.
func (_c *CategoryCreate) SetSlug(v string) *CategoryCreate {
	_c.mutation.SetSlug(v)
	return _c
}

// SetLabel sets the "label" field.
func (_c *CategoryCreate) SetLabel(v string) *CategoryCreate {
	_c.mutation.SetLabel(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *CategoryCreate) SetDescription(v string) *CategoryCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *CategoryCreate) SetNillableDescription(v *string) *CategoryCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetCreatorID sets the "creator_id" field.
func (_c *CategoryCreate) SetCreatorID(v int) *CategoryCreate {
	_c.mutation.SetCreatorID(v)
	return _c
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (_c *CategoryCreate) SetNillableCreatorID(v *int) *CategoryCreate {
	if v != nil {
		_c.SetCreatorID(*v)
	}
	return _c
}

// SetApproverID sets the "approver_id" field.
func (_c *CategoryCreate) SetApproverID(v int) *CategoryCreate {
	_c.mutation.SetApproverID(v)
	return _c
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_c *CategoryCreate) SetNillableApproverID(v *int) *CategoryCreate {
	if v != nil {
		_c.SetApproverID(*v)
	}
	return _c
}

// SetUpdaterID sets the "updater_id" field.
func (_c *CategoryCreate) SetUpdaterID(v int) *CategoryCreate {
	_c.mutation.SetUpdaterID(v)
	return _c
}

// SetNillableUpdaterID sets the "updater_id" field if the given value is not nil.
func (_c *CategoryCreate) SetNillableUpdaterID(v *int) *CategoryCreate {
	if v != nil {
		_c.SetUpdaterID(*v)
	}
	return _c
}

// SetDeleterID sets the "deleter_id" field.
func (_c *CategoryCreate) SetDeleterID(v int) *CategoryCreate {
	_c.mutation.SetDeleterID(v)
	return _c
}

// SetNillableDeleterID sets the "deleter_id" field if the given value is not nil.
func (_c *CategoryCreate) SetNillableDeleterID(v *int) *CategoryCreate {
	if v != nil {
		_c.SetDeleterID(*v)
	}
	return _c
}

// SetApprovedAt sets the "approved_at" field.
func (_c *CategoryCreate) SetApprovedAt(v time.Time) *CategoryCreate {
	_c.mutation.SetApprovedAt(v)
	return _c
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (_c *CategoryCreate) SetNillableApprovedAt(v *time.Time) *CategoryCreate {
	if v != nil {
		_c.SetApprovedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *CategoryCreate) SetDeletedAt(v time.Time) *CategoryCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *CategoryCreate) SetNillableDeletedAt(v *time.Time) *CategoryCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *CategoryCreate) SetStatus(v category.Status) *CategoryCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *CategoryCreate) SetNillableStatus(v *category.Status) *CategoryCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetMeta sets the "meta" field.
func (_c *CategoryCreate) SetMeta(v map[string]interface{}) *CategoryCreate {
	_c.mutation.SetMeta(v)
	return _c
}

// Mutation returns the CategoryMutation object of the builder.
func (_c *CategoryCreate) Mutation() *CategoryMutation {
	return _c.mutation
}

// Save creates the Category in the database.
func (_c *CategoryCreate) Save(ctx context.Context) (*Category, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CategoryCreate) SaveX(ctx context.Context) *Category {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CategoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CategoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CategoryCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := category.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := category.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.UUID(); !ok {
		v := category.DefaultUUID()
		_c.mutation.SetUUID(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := category.DefaultStatus
		_c.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *CategoryCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Category.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Category.updated_at"`)}
	}
	if _, ok := _c.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Category.uuid"`)}
	}
	if _, ok := _c.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Category.slug"`)}
	}
	if v, ok := _c.mutation.Slug(); ok {
		if err := category.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Category.slug": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "Category.label"`)}
	}
	if v, ok := _c.mutation.Label(); ok {
		if err := category.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "Category.label": %w`, err)}
		}
	}
	if v, ok := _c.mutation.CreatorID(); ok {
		if err := category.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Category.creator_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Category.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := category.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Category.status": %w`, err)}
		}
	}
	return nil
}

func (_c *CategoryCreate) sqlSave(ctx context.Context) (*Category, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CategoryCreate) createSpec() (*Category, *sqlgraph.CreateSpec) {
	var (
		_node = &Category{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(category.Table, sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(category.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(category.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.UUID(); ok {
		_spec.SetField(category.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := _c.mutation.Slug(); ok {
		_spec.SetField(category.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := _c.mutation.Label(); ok {
		_spec.SetField(category.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(category.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.CreatorID(); ok {
		_spec.SetField(category.FieldCreatorID, field.TypeInt, value)
		_node.CreatorID = value
	}
	if value, ok := _c.mutation.ApproverID(); ok {
		_spec.SetField(category.FieldApproverID, field.TypeInt, value)
		_node.ApproverID = value
	}
	if value, ok := _c.mutation.UpdaterID(); ok {
		_spec.SetField(category.FieldUpdaterID, field.TypeInt, value)
		_node.UpdaterID = value
	}
	if value, ok := _c.mutation.DeleterID(); ok {
		_spec.SetField(category.FieldDeleterID, field.TypeInt, value)
		_node.DeleterID = value
	}
	if value, ok := _c.mutation.ApprovedAt(); ok {
		_spec.SetField(category.FieldApprovedAt, field.TypeTime, value)
		_node.ApprovedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(category.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(category.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Meta(); ok {
		_spec.SetField(category.FieldMeta, field.TypeJSON, value)
		_node.Meta = value
	}
	return _node, _spec
}

// CategoryCreateBulk is the builder for creating many Category entities in bulk.
type CategoryCreateBulk struct {
	config
	err      error
	builders []*CategoryCreate
}

// Save creates the Category entities in the database.
func (_c *CategoryCreateBulk) Save(ctx context.Context) ([]*Category, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Category, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CategoryCreateBulk) SaveX(ctx context.Context) []*Category {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CategoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
