// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cortex/ent/category"
	"cortex/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CategoryUpdate is the builder for updating Category entities.
type CategoryUpdate struct {
	config
	hooks    []Hook
	mutation *CategoryMutation
}

// Where appends a list predicates to the CategoryUpdate builder.
func (_u *CategoryUpdate) Where(ps ...predicate.Category) *CategoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUUID sets the "uuid" field.
func (_u *CategoryUpdate) SetUUID(v string) *CategoryUpdate {
	_u.mutation.SetUUID(v)
	return _u
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableUUID(v *string) *CategoryUpdate {
	if v != nil {
		_u.SetUUID(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *CategoryUpdate) SetCreatedAt(v time.Time) *CategoryUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableCreatedAt(v *time.Time) *CategoryUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CategoryUpdate) SetUpdatedAt(v time.Time) *CategoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *CategoryUpdate) SetParentID(v int) *CategoryUpdate {
	_u.mutation.ResetParentID()
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableParentID(v *int) *CategoryUpdate {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// AddParentID adds value to the "parent_id" field.
func (_u *CategoryUpdate) AddParentID(v int) *CategoryUpdate {
	_u.mutation.AddParentID(v)
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *CategoryUpdate) ClearParentID() *CategoryUpdate {
	_u.mutation.ClearParentID()
	return _u
}

// SetSlug sets the "slug" field.
func (_u *CategoryUpdate) SetSlug(v string) *CategoryUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableSlug(v *string) *CategoryUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetLabel sets the "label" field.
func (_u *CategoryUpdate) SetLabel(v string) *CategoryUpdate {
	_u.mutation.SetLabel(v)
	return _u
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableLabel(v *string) *CategoryUpdate {
	if v != nil {
		_u.SetLabel(*v)
	}
	return _u
}

// SetCreatorID sets the "creator_id" field.
func (_u *CategoryUpdate) SetCreatorID(v int) *CategoryUpdate {
	_u.mutation.ResetCreatorID()
	_u.mutation.SetCreatorID(v)
	return _u
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableCreatorID(v *int) *CategoryUpdate {
	if v != nil {
		_u.SetCreatorID(*v)
	}
	return _u
}

// AddCreatorID adds value to the "creator_id" field.
func (_u *CategoryUpdate) AddCreatorID(v int) *CategoryUpdate {
	_u.mutation.AddCreatorID(v)
	return _u
}

// ClearCreatorID clears the value of the "creator_id" field.
func (_u *CategoryUpdate) ClearCreatorID() *CategoryUpdate {
	_u.mutation.ClearCreatorID()
	return _u
}

// SetDescription sets the "description" field.
func (_u *CategoryUpdate) SetDescription(v string) *CategoryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableDescription(v *string) *CategoryUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *CategoryUpdate) ClearDescription() *CategoryUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *CategoryUpdate) SetCreatedBy(v int) *CategoryUpdate {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableCreatedBy(v *int) *CategoryUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *CategoryUpdate) AddCreatedBy(v int) *CategoryUpdate {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *CategoryUpdate) SetUpdatedBy(v int) *CategoryUpdate {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableUpdatedBy(v *int) *CategoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *CategoryUpdate) AddUpdatedBy(v int) *CategoryUpdate {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *CategoryUpdate) ClearUpdatedBy() *CategoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetApprovedBy sets the "approved_by" field.
func (_u *CategoryUpdate) SetApprovedBy(v int) *CategoryUpdate {
	_u.mutation.ResetApprovedBy()
	_u.mutation.SetApprovedBy(v)
	return _u
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableApprovedBy(v *int) *CategoryUpdate {
	if v != nil {
		_u.SetApprovedBy(*v)
	}
	return _u
}

// AddApprovedBy adds value to the "approved_by" field.
func (_u *CategoryUpdate) AddApprovedBy(v int) *CategoryUpdate {
	_u.mutation.AddApprovedBy(v)
	return _u
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (_u *CategoryUpdate) ClearApprovedBy() *CategoryUpdate {
	_u.mutation.ClearApprovedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *CategoryUpdate) SetDeletedBy(v int) *CategoryUpdate {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableDeletedBy(v *int) *CategoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *CategoryUpdate) AddDeletedBy(v int) *CategoryUpdate {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *CategoryUpdate) ClearDeletedBy() *CategoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetApprovedAt sets the "approved_at" field.
func (_u *CategoryUpdate) SetApprovedAt(v time.Time) *CategoryUpdate {
	_u.mutation.SetApprovedAt(v)
	return _u
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableApprovedAt(v *time.Time) *CategoryUpdate {
	if v != nil {
		_u.SetApprovedAt(*v)
	}
	return _u
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (_u *CategoryUpdate) ClearApprovedAt() *CategoryUpdate {
	_u.mutation.ClearApprovedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *CategoryUpdate) SetDeletedAt(v time.Time) *CategoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableDeletedAt(v *time.Time) *CategoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *CategoryUpdate) ClearDeletedAt() *CategoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *CategoryUpdate) SetStatus(v category.Status) *CategoryUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableStatus(v *category.Status) *CategoryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetMeta sets the "meta" field.
func (_u *CategoryUpdate) SetMeta(v map[string]interface{}) *CategoryUpdate {
	_u.mutation.SetMeta(v)
	return _u
}

// ClearMeta clears the value of the "meta" field.
func (_u *CategoryUpdate) ClearMeta() *CategoryUpdate {
	_u.mutation.ClearMeta()
	return _u
}

// Mutation returns the CategoryMutation object of the builder.
func (_u *CategoryUpdate) Mutation() *CategoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CategoryUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CategoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CategoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CategoryUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := category.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CategoryUpdate) check() error {
	if v, ok := _u.mutation.Slug(); ok {
		if err := category.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Category.slug": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Label(); ok {
		if err := category.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "Category.label": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CreatorID(); ok {
		if err := category.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Category.creator_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := category.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Category.status": %w`, err)}
		}
	}
	return nil
}

func (_u *CategoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(category.Table, category.Columns, sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UUID(); ok {
		_spec.SetField(category.FieldUUID, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(category.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(category.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ParentID(); ok {
		_spec.SetField(category.FieldParentID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedParentID(); ok {
		_spec.AddField(category.FieldParentID, field.TypeInt, value)
	}
	if _u.mutation.ParentIDCleared() {
		_spec.ClearField(category.FieldParentID, field.TypeInt)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(category.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Label(); ok {
		_spec.SetField(category.FieldLabel, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatorID(); ok {
		_spec.SetField(category.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCreatorID(); ok {
		_spec.AddField(category.FieldCreatorID, field.TypeInt, value)
	}
	if _u.mutation.CreatorIDCleared() {
		_spec.ClearField(category.FieldCreatorID, field.TypeInt)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(category.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(category.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(category.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(category.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(category.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(category.FieldUpdatedBy, field.TypeInt, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(category.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := _u.mutation.ApprovedBy(); ok {
		_spec.SetField(category.FieldApprovedBy, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedApprovedBy(); ok {
		_spec.AddField(category.FieldApprovedBy, field.TypeInt, value)
	}
	if _u.mutation.ApprovedByCleared() {
		_spec.ClearField(category.FieldApprovedBy, field.TypeInt)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(category.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(category.FieldDeletedBy, field.TypeInt, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(category.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := _u.mutation.ApprovedAt(); ok {
		_spec.SetField(category.FieldApprovedAt, field.TypeTime, value)
	}
	if _u.mutation.ApprovedAtCleared() {
		_spec.ClearField(category.FieldApprovedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(category.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(category.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(category.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Meta(); ok {
		_spec.SetField(category.FieldMeta, field.TypeJSON, value)
	}
	if _u.mutation.MetaCleared() {
		_spec.ClearField(category.FieldMeta, field.TypeJSON)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CategoryUpdateOne is the builder for updating a single Category entity.
type CategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CategoryMutation
}

// SetUUID sets the "uuid" field.
func (_u *CategoryUpdateOne) SetUUID(v string) *CategoryUpdateOne {
	_u.mutation.SetUUID(v)
	return _u
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableUUID(v *string) *CategoryUpdateOne {
	if v != nil {
		_u.SetUUID(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *CategoryUpdateOne) SetCreatedAt(v time.Time) *CategoryUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableCreatedAt(v *time.Time) *CategoryUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CategoryUpdateOne) SetUpdatedAt(v time.Time) *CategoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *CategoryUpdateOne) SetParentID(v int) *CategoryUpdateOne {
	_u.mutation.ResetParentID()
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableParentID(v *int) *CategoryUpdateOne {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// AddParentID adds value to the "parent_id" field.
func (_u *CategoryUpdateOne) AddParentID(v int) *CategoryUpdateOne {
	_u.mutation.AddParentID(v)
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *CategoryUpdateOne) ClearParentID() *CategoryUpdateOne {
	_u.mutation.ClearParentID()
	return _u
}

// SetSlug sets the "slug" field.
func (_u *CategoryUpdateOne) SetSlug(v string) *CategoryUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableSlug(v *string) *CategoryUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetLabel sets the "label" field.
func (_u *CategoryUpdateOne) SetLabel(v string) *CategoryUpdateOne {
	_u.mutation.SetLabel(v)
	return _u
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableLabel(v *string) *CategoryUpdateOne {
	if v != nil {
		_u.SetLabel(*v)
	}
	return _u
}

// SetCreatorID sets the "creator_id" field.
func (_u *CategoryUpdateOne) SetCreatorID(v int) *CategoryUpdateOne {
	_u.mutation.ResetCreatorID()
	_u.mutation.SetCreatorID(v)
	return _u
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableCreatorID(v *int) *CategoryUpdateOne {
	if v != nil {
		_u.SetCreatorID(*v)
	}
	return _u
}

// AddCreatorID adds value to the "creator_id" field.
func (_u *CategoryUpdateOne) AddCreatorID(v int) *CategoryUpdateOne {
	_u.mutation.AddCreatorID(v)
	return _u
}

// ClearCreatorID clears the value of the "creator_id" field.
func (_u *CategoryUpdateOne) ClearCreatorID() *CategoryUpdateOne {
	_u.mutation.ClearCreatorID()
	return _u
}

// SetDescription sets the "description" field.
func (_u *CategoryUpdateOne) SetDescription(v string) *CategoryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableDescription(v *string) *CategoryUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *CategoryUpdateOne) ClearDescription() *CategoryUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *CategoryUpdateOne) SetCreatedBy(v int) *CategoryUpdateOne {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableCreatedBy(v *int) *CategoryUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *CategoryUpdateOne) AddCreatedBy(v int) *CategoryUpdateOne {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *CategoryUpdateOne) SetUpdatedBy(v int) *CategoryUpdateOne {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableUpdatedBy(v *int) *CategoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *CategoryUpdateOne) AddUpdatedBy(v int) *CategoryUpdateOne {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *CategoryUpdateOne) ClearUpdatedBy() *CategoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetApprovedBy sets the "approved_by" field.
func (_u *CategoryUpdateOne) SetApprovedBy(v int) *CategoryUpdateOne {
	_u.mutation.ResetApprovedBy()
	_u.mutation.SetApprovedBy(v)
	return _u
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableApprovedBy(v *int) *CategoryUpdateOne {
	if v != nil {
		_u.SetApprovedBy(*v)
	}
	return _u
}

// AddApprovedBy adds value to the "approved_by" field.
func (_u *CategoryUpdateOne) AddApprovedBy(v int) *CategoryUpdateOne {
	_u.mutation.AddApprovedBy(v)
	return _u
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (_u *CategoryUpdateOne) ClearApprovedBy() *CategoryUpdateOne {
	_u.mutation.ClearApprovedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *CategoryUpdateOne) SetDeletedBy(v int) *CategoryUpdateOne {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableDeletedBy(v *int) *CategoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *CategoryUpdateOne) AddDeletedBy(v int) *CategoryUpdateOne {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *CategoryUpdateOne) ClearDeletedBy() *CategoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetApprovedAt sets the "approved_at" field.
func (_u *CategoryUpdateOne) SetApprovedAt(v time.Time) *CategoryUpdateOne {
	_u.mutation.SetApprovedAt(v)
	return _u
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableApprovedAt(v *time.Time) *CategoryUpdateOne {
	if v != nil {
		_u.SetApprovedAt(*v)
	}
	return _u
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (_u *CategoryUpdateOne) ClearApprovedAt() *CategoryUpdateOne {
	_u.mutation.ClearApprovedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *CategoryUpdateOne) SetDeletedAt(v time.Time) *CategoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableDeletedAt(v *time.Time) *CategoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *CategoryUpdateOne) ClearDeletedAt() *CategoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *CategoryUpdateOne) SetStatus(v category.Status) *CategoryUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableStatus(v *category.Status) *CategoryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetMeta sets the "meta" field.
func (_u *CategoryUpdateOne) SetMeta(v map[string]interface{}) *CategoryUpdateOne {
	_u.mutation.SetMeta(v)
	return _u
}

// ClearMeta clears the value of the "meta" field.
func (_u *CategoryUpdateOne) ClearMeta() *CategoryUpdateOne {
	_u.mutation.ClearMeta()
	return _u
}

// Mutation returns the CategoryMutation object of the builder.
func (_u *CategoryUpdateOne) Mutation() *CategoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the CategoryUpdate builder.
func (_u *CategoryUpdateOne) Where(ps ...predicate.Category) *CategoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CategoryUpdateOne) Select(field string, fields ...string) *CategoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Category entity.
func (_u *CategoryUpdateOne) Save(ctx context.Context) (*Category, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CategoryUpdateOne) SaveX(ctx context.Context) *Category {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CategoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CategoryUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := category.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CategoryUpdateOne) check() error {
	if v, ok := _u.mutation.Slug(); ok {
		if err := category.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Category.slug": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Label(); ok {
		if err := category.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "Category.label": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CreatorID(); ok {
		if err := category.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Category.creator_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := category.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Category.status": %w`, err)}
		}
	}
	return nil
}

func (_u *CategoryUpdateOne) sqlSave(ctx context.Context) (_node *Category, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(category.Table, category.Columns, sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Category.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, category.FieldID)
		for _, f := range fields {
			if !category.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != category.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UUID(); ok {
		_spec.SetField(category.FieldUUID, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(category.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(category.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ParentID(); ok {
		_spec.SetField(category.FieldParentID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedParentID(); ok {
		_spec.AddField(category.FieldParentID, field.TypeInt, value)
	}
	if _u.mutation.ParentIDCleared() {
		_spec.ClearField(category.FieldParentID, field.TypeInt)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(category.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Label(); ok {
		_spec.SetField(category.FieldLabel, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatorID(); ok {
		_spec.SetField(category.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCreatorID(); ok {
		_spec.AddField(category.FieldCreatorID, field.TypeInt, value)
	}
	if _u.mutation.CreatorIDCleared() {
		_spec.ClearField(category.FieldCreatorID, field.TypeInt)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(category.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(category.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(category.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(category.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(category.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(category.FieldUpdatedBy, field.TypeInt, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(category.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := _u.mutation.ApprovedBy(); ok {
		_spec.SetField(category.FieldApprovedBy, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedApprovedBy(); ok {
		_spec.AddField(category.FieldApprovedBy, field.TypeInt, value)
	}
	if _u.mutation.ApprovedByCleared() {
		_spec.ClearField(category.FieldApprovedBy, field.TypeInt)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(category.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(category.FieldDeletedBy, field.TypeInt, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(category.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := _u.mutation.ApprovedAt(); ok {
		_spec.SetField(category.FieldApprovedAt, field.TypeTime, value)
	}
	if _u.mutation.ApprovedAtCleared() {
		_spec.ClearField(category.FieldApprovedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(category.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(category.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(category.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Meta(); ok {
		_spec.SetField(category.FieldMeta, field.TypeJSON, value)
	}
	if _u.mutation.MetaCleared() {
		_spec.ClearField(category.FieldMeta, field.TypeJSON)
	}
	_node = &Category{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
